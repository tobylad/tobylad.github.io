{"version":3,"sources":["laptop-code-solid.svg","laptop-code-solid-white.svg","user-tie-solid.svg","user-tie-solid-white.svg","project-diagram-solid.svg","project-diagram-solid-white.svg","Header.js","TileSet.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","TileSet","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","switchActiveIcon","iconStr","state","activeTile","setState","getIcon","laptop","laptopIcon","laptop-white","laptopIconWhite","proDude","proDudeIcon","proDude-white","proDudeIconWhite","project","projectIcon","project-white","projectIconWhite","getTileImg","tile","_this2","src","alt","onClick","React","Component","App","src_Header","src_TileSet_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,+DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,4DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,kECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,2OCYzBC,MAVf,WACE,OACEC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,OAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gDACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAb,mKC4EOC,cAxEb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAORQ,iBAAmB,SAACC,GACdA,IAAYR,EAAKS,MAAMC,WACzBV,EAAKW,SAAS,CAAED,WAAY,KAE5BV,EAAKW,SAAS,CAAED,WAAYF,KAZbR,EAgBnBY,QAAU,SAACJ,GAWT,MAVc,CACZK,OAAUC,IACVC,eAAgBC,IAChBC,QAAWC,IACXC,gBAAiBC,IACjBC,QAAWC,IACXC,gBAAiBC,KAINhB,IA3BIR,EA8BnByB,WAAa,SAACC,GACZ,OAAI1B,EAAKS,MAAMC,aAAegB,EACrB1B,EAAKY,QAAQc,EAAO,UAEpB1B,EAAKY,QAAQc,IA/BtB1B,EAAKS,MAAQ,CACXC,WAAY,IAJGV,wEAsCV,IAAA2B,EAAAxB,KACP,OACET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACf+B,IAAKzB,KAAKsB,WAAW,UACrBI,IAAI,SACJC,QAAS,kBAAMH,EAAKpB,iBAAiB,aACrCb,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,0BAGFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACf+B,IAAKzB,KAAKsB,WAAW,WACrBI,IAAI,UACJC,QAAS,kBAAMH,EAAKpB,iBAAiB,cACrCb,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,6BAGFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACf+B,IAAKzB,KAAKsB,WAAW,WACrBI,IAAI,UACJC,QAAS,kBAAMH,EAAKpB,iBAAiB,cACrCb,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,uCAlEYmC,IAAMC,WCKbC,MATf,WACE,OACEvC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACsC,EAAD,MACAxC,EAAAC,EAAAC,cAACuC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9ab1bfac.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/laptop-code-solid.391e3c34.svg\";","module.exports = __webpack_public_path__ + \"static/media/laptop-code-solid-white.7668204b.svg\";","module.exports = __webpack_public_path__ + \"static/media/user-tie-solid.48df1a32.svg\";","module.exports = __webpack_public_path__ + \"static/media/user-tie-solid-white.10f7871a.svg\";","module.exports = __webpack_public_path__ + \"static/media/project-diagram-solid.abde2fe9.svg\";","module.exports = __webpack_public_path__ + \"static/media/project-diagram-solid-white.6c334797.svg\";","import React from 'react';\n\nfunction Header() {\n  return (\n    <header className=\"row\">\n      <div className=\"col-10 offset-1 col-lg-6 offset-lg-3 tagline\">\n        <p className=\"my-name\">Toby Ladislas</p>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;","import React from 'react';\nimport './TileSet.css';\nimport laptopIcon from './laptop-code-solid.svg';\nimport laptopIconWhite from './laptop-code-solid-white.svg';\nimport proDudeIcon from './user-tie-solid.svg';\nimport proDudeIconWhite from './user-tie-solid-white.svg';\nimport projectIcon from './project-diagram-solid.svg';\nimport projectIconWhite from './project-diagram-solid-white.svg';\n\nclass TileSet extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      activeTile: \"\"\n    };\n  }\n\n  switchActiveIcon = (iconStr) => {\n    if (iconStr === this.state.activeTile) {\n      this.setState({ activeTile: \"\" });\n    } else {\n      this.setState({ activeTile: iconStr });\n    }\n  }\n\n  getIcon = (iconStr) => {\n    const icons = {\n      \"laptop\": laptopIcon,\n      \"laptop-white\": laptopIconWhite,\n      \"proDude\": proDudeIcon,\n      \"proDude-white\": proDudeIconWhite,\n      \"project\": projectIcon,\n      \"project-white\": projectIconWhite,\n\n    };\n\n    return icons[iconStr];\n  }\n\n  getTileImg = (tile) => {\n    if (this.state.activeTile === tile) {\n      return this.getIcon(tile + \"-white\");\n    } else {\n      return this.getIcon(tile);\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"row\">\n        <div className=\"tile col-4\">\n          <img className=\"laptop tile-icon\" \n          src={this.getTileImg(\"laptop\")} \n          alt=\"laptop\" \n          onClick={() => this.switchActiveIcon(\"laptop\")}/>\n          <br/>\n          <span>Developer</span>\n        </div>\n\n        <div className=\"tile col-4\">\n          <img className=\"pro-dude tile-icon\" \n          src={this.getTileImg(\"proDude\")} \n          alt=\"proDude\" \n          onClick={() => this.switchActiveIcon(\"proDude\")} />\n          <br/>\n          <span>Professional</span>\n        </div>\n\n        <div className=\"tile col-4\">\n          <img className=\"project tile-icon\" \n          src={this.getTileImg(\"project\")} \n          alt=\"project\" \n          onClick={() => this.switchActiveIcon(\"project\")} />\n          <br/>\n          <span>Problem Solver</span>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TileSet;","import React from 'react';\nimport './App.css';\nimport Header from './Header';\nimport TileSet from './TileSet';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Header />\n      <TileSet />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}